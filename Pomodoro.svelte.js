import * as  __SNOWPACK_HMR__ from '../../../_snowpack/hmr-client.js';
import.meta.hot = __SNOWPACK_HMR__.createHotContext(import.meta.url);
import * as __SNOWPACK_ENV__ from '../../../_snowpack/env.js';
import.meta.env = __SNOWPACK_ENV__;

/* src/components/Pomodoro.svelte generated by Svelte v3.44.1 */
import {
	SvelteComponentDev,
	add_location,
	append_hydration_dev,
	attr_dev,
	children,
	claim_element,
	claim_space,
	claim_text,
	component_subscribe,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_hydration_dev,
	listen_dev,
	noop,
	run_all,
	safe_not_equal,
	set_data_dev,
	space,
	text,
	validate_slots,
	validate_store
} from "../../../_snowpack/pkg/svelte.internal.v3.44.1.js";

import { readable, writable } from '../../../_snowpack/pkg/svelte.store.v3.44.1.js';
const file = "src/components/Pomodoro.svelte";

function create_fragment(ctx) {
	let div;
	let h10;
	let t0;
	let t1;
	let t2;
	let button0;
	let t3;
	let t4;
	let button1;
	let t5;
	let t6;
	let br;
	let t7;
	let h11;
	let t8;
	let t9_value = /*formatter*/ ctx[4].format(/*$time*/ ctx[1]) + "";
	let t9;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			h10 = element("h1");
			t0 = text("The count is ");
			t1 = text(/*$countStore*/ ctx[0]);
			t2 = space();
			button0 = element("button");
			t3 = text("-");
			t4 = space();
			button1 = element("button");
			t5 = text("+");
			t6 = space();
			br = element("br");
			t7 = space();
			h11 = element("h1");
			t8 = text("The time is ");
			t9 = text(t9_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h10 = claim_element(div_nodes, "H1", {});
			var h10_nodes = children(h10);
			t0 = claim_text(h10_nodes, "The count is ");
			t1 = claim_text(h10_nodes, /*$countStore*/ ctx[0]);
			h10_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			button0 = claim_element(div_nodes, "BUTTON", {});
			var button0_nodes = children(button0);
			t3 = claim_text(button0_nodes, "-");
			button0_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			button1 = claim_element(div_nodes, "BUTTON", {});
			var button1_nodes = children(button1);
			t5 = claim_text(button1_nodes, "+");
			button1_nodes.forEach(detach_dev);
			t6 = claim_space(div_nodes);
			br = claim_element(div_nodes, "BR", {});
			t7 = claim_space(div_nodes);
			h11 = claim_element(div_nodes, "H1", {});
			var h11_nodes = children(h11);
			t8 = claim_text(h11_nodes, "The time is ");
			t9 = claim_text(h11_nodes, t9_value);
			h11_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h10, file, 40, 0, 952);
			add_location(button0, file, 41, 0, 988);
			add_location(button1, file, 44, 0, 1042);
			add_location(br, file, 47, 0, 1096);
			add_location(h11, file, 48, 0, 1103);
			attr_dev(div, "class", "mx-auto my-10 p-10 md:w-1/2 text-center justify-center");
			add_location(div, file, 37, 0, 880);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, h10);
			append_hydration_dev(h10, t0);
			append_hydration_dev(h10, t1);
			append_hydration_dev(div, t2);
			append_hydration_dev(div, button0);
			append_hydration_dev(button0, t3);
			append_hydration_dev(div, t4);
			append_hydration_dev(div, button1);
			append_hydration_dev(button1, t5);
			append_hydration_dev(div, t6);
			append_hydration_dev(div, br);
			append_hydration_dev(div, t7);
			append_hydration_dev(div, h11);
			append_hydration_dev(h11, t8);
			append_hydration_dev(h11, t9);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*countStore*/ ctx[2].decrement, false, false, false),
					listen_dev(button1, "click", /*countStore*/ ctx[2].increment, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$countStore*/ 1) set_data_dev(t1, /*$countStore*/ ctx[0]);
			if (dirty & /*$time*/ 2 && t9_value !== (t9_value = /*formatter*/ ctx[4].format(/*$time*/ ctx[1]) + "")) set_data_dev(t9, t9_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $countStore;
	let $time;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Pomodoro', slots, []);

	function createCountStore() {
		const { subscribe, set, update } = writable(0);

		return {
			subscribe,
			increment: () => update(n => n + 1),
			decrement: () => update(n => n - 1),
			reset: () => set(0)
		};
	}

	const countStore = createCountStore();
	validate_store(countStore, 'countStore');
	component_subscribe($$self, countStore, value => $$invalidate(0, $countStore = value));

	const time = readable(new Date(), function start(set) {
		const interval = setInterval(
			() => {
				set(new Date());
			},
			1000
		);

		return function stop() {
			clearInterval(interval);
		};
	});

	validate_store(time, 'time');
	component_subscribe($$self, time, value => $$invalidate(1, $time = value));

	const formatter = new Intl.DateTimeFormat('en',
	{
			hour12: true,
			hour: 'numeric',
			minute: '2-digit',
			second: '2-digit'
		});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Pomodoro> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		readable,
		writable,
		createCountStore,
		countStore,
		time,
		formatter,
		$countStore,
		$time
	});

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$countStore*/ 1) {
			$: if ($countStore >= 10) {
				alert('Count is too high');
				countStore.reset();
			}
		}
	};

	return [$countStore, $time, countStore, time, formatter];
}

class Pomodoro extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Pomodoro",
			options,
			id: create_fragment.name
		});
	}
}
import * as ___SVELTE_HMR_HOT_API from '../../../_snowpack/pkg/svelte-hmr.runtime.hot-api-esm.v0.13.5.js';import { adapter as ___SVELTE_HMR_HOT_API_PROXY_ADAPTER } from '../../../_snowpack/pkg/svelte-hmr.runtime.proxy-adapter-dom.v0.13.5.js';if (import.meta && import.meta.hot) { if (false) import.meta.hot.accept(); Pomodoro = ___SVELTE_HMR_HOT_API.applyHmr({ m: import.meta, id: "/home/patrickm/Documents/fcc-js-frameworks-certificate/src/components/Pomodoro.svelte", hotOptions: {"preserveLocalState":false,"noPreserveStateKey":["@hmr:reset","@!hmr"],"preserveAllLocalStateKey":"@hmr:keep-all","preserveLocalStateKey":"@hmr:keep","noReload":false,"optimistic":true,"acceptNamedExports":true,"acceptAccessors":true,"injectCss":true,"cssEjectDelay":100,"native":false,"importAdapterName":"___SVELTE_HMR_HOT_API_PROXY_ADAPTER","noOverlay":false}, Component: Pomodoro, ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER, acceptable: true, preserveLocalState: false, cssId: undefined, nonCssHash: undefined, ignoreCss: true, }); }
export default Pomodoro;

